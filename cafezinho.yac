%{
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include "tipos.h"
#include "nodes.h"


int yylex(void);
void yyerror(const char *s);

extern int yylineno;


void GenerateTree();

Node * root;

%}

%union{
    int integer;
    struct _Node * node;
    char * str;
}

%start Programa /* Inidica que o simbolo incial da gramatica e programm */

%token <integer> INTCONST 
%token <node> ID
%token <str> CARCONST 
%token <str> CADEIACAR
%token PROGRAMA RETORNE 
%token INT CAR 
%token LEIA ESCREVA
%token SE ENTAO SENAO 
%token ENQUANTO
%token OU_OP E_OP EQ_OP NE_OP GE_OP LE_OP
%token NOVALINHA
%token EXECUTE

%type <node> Programa DeclFuncVar DeclProg DeclVar DeclFunc ListaParametros ListaParametrosCont Bloco
%type <node> ListaDeclVar Tipo ListaComando Expr AssignExpr OrExpr AndExpr EqExpr
%type <node> DesigExpr AddExpr MulExpr UnExpr LValueExpr PrimExpr ListExpr
%type <node> Comando CondExpr

%%

Programa:
    DeclFuncVar DeclProg			{
        printf("LÉXICA E SINTÁTICAMENTE CORRETO\n"); 
        Node * aux = createNode(NO_PROGRAMA);
        aux->data1 = $1;
        aux->data2 = $2;
        root = $$;
    };

DeclFuncVar:
    Tipo ID DeclVar ';' DeclFuncVar {
        Node * aux = createNode(NO_ID);
        aux->data1 = $2;
        $$ = aux;
        
    }|
    
    Tipo ID'['INTCONST']' DeclVar ';' DeclFuncVar{
        
    }|

    Tipo ID DeclFunc DeclFuncVar{
        
    }|{
        $$ = NULL;
    };

DeclProg :
    PROGRAMA Bloco {
        $$ = NULL;
    }; 

DeclVar :
    ',' ID DeclVar {
       $$ = NULL; 
    }|

    ',' ID'['INTCONST']' DeclVar{
        $$ = NULL;
    }|{
        $$ = NULL;
    };

DeclFunc :
    '('ListaParametros')' Bloco{
        $$ = NULL;
    };

ListaParametros :
    ListaParametrosCont{
        $$ = NULL;
    }| ;

ListaParametrosCont :
    Tipo ID {
        $$ = NULL;
    }|
    Tipo ID'['']'{
        $$ = NULL;
    }|
    Tipo ID ',' ListaParametrosCont{
        $$ = NULL;
    }|
    Tipo ID'['']' ',' ListaParametrosCont{
        $$ = NULL;
    };

Bloco :
    '{' ListaDeclVar ListaComando '}'{
        $$ = NULL;
    }|
    '{' ListaDeclVar '}'{
        $$ = NULL;
    };

ListaDeclVar:
    Tipo ID DeclVar ';' ListaDeclVar{
        $$ = NULL;
    }|
    Tipo ID'['INTCONST']' DeclVar ';' ListaDeclVar {
        $$ = NULL;
    }|{
        $$ = NULL;
    };

Tipo :
    INT {
        $$ = NULL;
    }|
    CAR{
        $$ = NULL;
    };

ListaComando: 
    Comando {
        $$ = NULL;
    }|
    Comando ListaComando{
        $$ = NULL;
    };

Comando:
    ';'{
        $$ = NULL;
    }|
    Expr ';'{
        $$ = NULL;
    }|
    RETORNE Expr ';'{
        $$ = NULL;
    }|
    LEIA LValueExpr ';'{
        $$ = NULL;
    }|
    ESCREVA CADEIACAR ';'{
        $$ = NULL;
    }|
    ESCREVA Expr ';'{
        $$ = NULL;
    }|
    NOVALINHA{
        $$ = NULL;
    }|
    SE '(' Expr ')' ENTAO Comando{
        $$ = NULL;
    }|
    SE '(' Expr ')' ENTAO Comando SENAO Comando{
        $$ = NULL;
    }|
    ENQUANTO '(' Expr ')' EXECUTE Comando{
        $$ = NULL;
    }|
    Bloco{
        $$ = NULL;
    };

Expr:
    AssignExpr{
        $$ = NULL;
    };

AssignExpr:
    CondExpr{
        $$ = NULL;
    }|
    LValueExpr '=' AssignExpr {
        $$ = NULL;
    };

CondExpr:
    OrExpr {
        $$ = NULL;
    }|
    OrExpr '?' Expr ':' CondExpr{
        $$ = NULL;
    };

OrExpr:
    OrExpr OU_OP AndExpr{
        $$ = NULL;
    }|
    AndExpr{
        $$ = NULL;
    };

AndExpr:
    AndExpr E_OP EqExpr{
        $$ = NULL;
    }|
    EqExpr{
        $$ = NULL;
    };

EqExpr:
    EqExpr EQ_OP DesigExpr{
        $$ = NULL;
    }|
    EqExpr NE_OP DesigExpr{
        $$ = NULL;
    }|
    DesigExpr{
        $$ = NULL;
    };

DesigExpr:
    DesigExpr '<' AddExpr{
        $$ = NULL;
    }|
    DesigExpr '>' AddExpr{
        $$ = NULL;
    }|
    DesigExpr GE_OP AddExpr{
        $$ = NULL;
    }|
    DesigExpr LE_OP AddExpr{
        $$ = NULL;
    }|
    AddExpr{
        $$ = NULL;
    };

AddExpr:
    AddExpr '+' MulExpr {
        $$ = NULL;
    }|
    AddExpr '-' MulExpr{
        $$ = NULL;
    }|
    MulExpr{
        $$ = NULL;
    };

MulExpr:
    MulExpr '*' UnExpr{
        $$ = NULL;
    }|
    MulExpr '/' UnExpr{
        $$ = NULL;
    }|
    MulExpr '%' UnExpr{
        $$ = NULL;
    }|
    UnExpr{
        $$ = NULL;
    };

UnExpr:
    '-'PrimExpr{
        $$ = NULL;
    }|
    '!'PrimExpr{
        $$ = NULL;
    }|
    PrimExpr{
        $$ = NULL;
    };

LValueExpr:
    ID'[' Expr ']'{
        $$ = NULL;
    }|
    ID{
        $$ = NULL;
    };

PrimExpr:
    ID'(' ListExpr ')'{
        $$ = NULL;
    }|
    ID'('')'{
        $$ = NULL;
    }|
    ID'[' Expr ']'{
        $$ = NULL;
    }|
    ID{
        $$ = NULL;
    }|
    CARCONST{
        $$ = NULL;
    }|
    INTCONST{
        $$ = NULL;
    }|
    '(' Expr ')'{
        $$ = NULL;
    };

ListExpr:
    AssignExpr{
        $$ = NULL;
    }|
    ListExpr ',' AssignExpr{
        $$ = NULL;
    };

%%

void yyerror(const char *s) {
    printf("ERRO: %s in line %d\n", s, yylineno);
    exit(-1);
}

/**
 * main function
 */
int main(int argc, char* argv[]) {
    yyparse();
}

void generateTree(){

}
